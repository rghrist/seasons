{"version":3,"sources":["SeasonDisplay.js","LoadingSpinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","LoadingSpinner","defaultProps","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","errorMessage","_this2","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","failure","message","src_SeasonDisplay_0","src_LoadingSpinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,qBACNC,SAAU,eAyBCE,EAZO,SAAAC,GACpB,IAViBC,EAAKC,EAUhBC,GAVWF,EAUQD,EAAMC,KAVTC,GAUc,IAAIE,MAAOC,YATnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAKDK,EAEFZ,EAAaS,GAAhCP,EAFqBU,EAErBV,KAAMC,EAFeS,EAEfT,SACd,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC5BZe,EAAiB,SAAAZ,GACrB,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBV,EAAMJ,QAK7CgB,EAAeC,aAAe,CAC5BjB,KAAM,yBAGOgB,QCTTE,cAGJ,SAAAA,EAAYd,GAAO,IAAAe,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMlB,KAEDsB,MAAQ,CAAErB,IAAK,KAAMsB,aAAc,IAHvBR,mFAMC,IAAAS,EAAAN,KAClBO,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GACEL,EAAKM,SAAS,CAAE7B,IAAK4B,EAASE,OAAOC,YAEvC,SAAAC,GACET,EAAKM,SAAS,CAAEP,aAAcU,EAAQC,oDAM1C,OAAIhB,KAAKI,MAAMC,eAAiBL,KAAKI,MAAMrB,IAClCM,EAAAC,EAAAC,cAAA,qBAAaS,KAAKI,MAAMC,eACrBL,KAAKI,MAAMC,cAAgBL,KAAKI,MAAMrB,IACzCM,EAAAC,EAAAC,cAAC0B,EAAD,CAAelC,IAAKiB,KAAKI,MAAMrB,MAGpCM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAgBxC,KAAK,2EAQ3B,OAAOW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcQ,KAAKmB,wBApC3BC,IAAMC,WAwCxBC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.f762e024.chunk.js","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach\",\n    iconName: 'sun'\n  },\n  winter: {\n    text: 'Brrr, it is chilly',\n    iconName: 'snowflake'\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'summer' : 'winter';\n  } else {\n    return lat > 0 ? 'winter' : 'summer';\n  }\n};\n\n//root element matches css name of class\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui text loader\">{props.text}</div>\n    </div>\n  );\n};\n\nLoadingSpinner.defaultProps = {\n  text: 'Loadingfddfdf..adfaf.'\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport LoadingSpinner from './LoadingSpinner';\n\nclass App extends React.Component {\n  //not required by react\n  //constructor\n  constructor(props) {\n    super(props);\n    //this is the only time we do direct assignment for state\n    this.state = { lat: null, errorMessage: '' };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => {\n        this.setState({ lat: position.coords.latitude });\n      },\n      failure => {\n        this.setState({ errorMessage: failure.message });\n      }\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    } else if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    } else {\n      return (\n        <div>\n          <LoadingSpinner text=\"Allow geolocation to see the season.\" />\n        </div>\n      );\n    }\n  }\n  //react says we must define render\n  //render only deals with jsx\n  render() {\n    return <div className=\"border red\">{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}